name: CI

on:
  pull_request:
  push:
    branches:
      - release
      - alpha
      - beta

env:
  ASSET_LOCATION: demo/soulmachines.js
  ASSET_NAME: 'soulmachines'
  AWS_PATH: 's3://static-prod.soulmachines.com'
  AWS_DEFAULT_OUTPUT: 'json'
  AWS_DEFAULT_REGION: 'us-east-1'
  AWS_ACCESS_KEY_ID: 'AKIA5OOP4KZDW7WHCYVV'
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
  CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
  GH_TOKEN: ${{ secrets.SMGITHUBBOT_REPO_COMMIT }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      RELEASE_VERSION: ${{ steps.RELEASE_VERSION.outputs.tag }}

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '12.x'

      - name: Caching Dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Install with auth token so we can access @soulmachines/* private packages
      - name: Set registry path and credentials for internal builds
        run: echo "@soulmachines:registry=https://npm.pkg.github.com/soulmachines" > .npmrc && echo "//npm.pkg.github.com/:_authToken=${{ secrets.SMGITHUBBOT_READ_PACKAGES }}" >> .npmrc

      - name: Install Dependencies
        run: npm ci

      - name: Run Lint
        run: npm run lint

      - name: Run Tests
        run: npm run test-ci

      - name: Run Prettier
        run: npm run prettier

      - name: Build Asset
        run: npm run package

      - if: github.ref == 'refs/heads/release' || github.ref == 'refs/heads/alpha' || github.ref == 'refs/heads/beta'
        name: Run Semantic Release
        id: RELEASE_VERSION
        run: |
          npx semantic-release
          echo $(git describe --abbrev=0 --tags)
          version=$(git describe --abbrev=0 --tags)
          echo "::set-output name=tag::${version}"
        env:
          GH_TOKEN: ${{ env.GH_TOKEN }}

  release:
    if: github.ref == 'refs/heads/release' || github.ref == 'refs/heads/alpha' || github.ref == 'refs/heads/beta'
    needs: [build]
    runs-on: ubuntu-latest
    name: Release to CDN
    steps:
      - run: |
          aws s3 cp --sse AES256 ${{ env.ASSET_LOCATION }} ${{ env.AWS_PATH }}/${{ env.ASSET_NAME }}-${{ needs.build.outputs.RELEASE_VERSION }}.js
          if [[ ${{ needs.build.outputs.RELEASE_VERSION }} == *"alpha"*  ]] || [[ ${{ needs.build.outputs.RELEASE_VERSION }} == *"beta"* ]]
          then
              echo "pre-release, not updating latest"
          else
              echo "updating latest"
              aws s3 cp --sse AES256 ${{ env.ASSET_LOCATION }} ${{ env.AWS_PATH }}/${{ env.ASSET_NAME }}-latest.js
          fi
          aws cloudfront create-invalidation --distribution-id=${{ env.CLOUDFRONT_DISTRIBUTION_ID }} --paths '/*'
